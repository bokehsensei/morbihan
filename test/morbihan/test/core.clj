(ns morbihan.test.core
  (:use [clojure.test])
    (:use morbihan.sensor
          morbihan.seuron
          morbihan.neuron
          morbihan.model))

(defn setup [] (reset))

(defn my-fixture [f]
  (setup)
  (f))
  ;(shutdown-agents))

(use-fixtures :each my-fixture)

(deftest teuron-test1
  (testing "Basic Teuron Test"
    (def t0 (teuron))))

(deftest seuron-teuron-link-test
 (testing "Seuron-Teuron Link Test"
  (def x0 (sensor))
  (def x1 (sensor))
  (def s2 (seuron))
  (def t3 (teuron))
  (def t4 (teuron))
  (def t5 (teuron))
  (add-sensors x0 x1 s2)
  (add-listener s2 t3)
  (add-listener t3 t4)
  (add-listener t4 t5)
  (def sensors-periods (list x0 0 x1 :a x0 1 x1 :b x0 0 x1 :a x0 1 x1 :b))
  (def neurons (list x0 x1 s2 t3 t4 t5))
  (time (send-pattern 4 sensors-periods neurons))
  (pr-log x0 x1 s2 t3 t4 t5)))

(run-tests)

;(deftest sensor-replay
         ;(def x00 (sensor))
         ;(def t10 (teuron))
         ;(add-sensor x00 t10)
         ;(send x00 feel-input "RG")
         ;(await x00 t10) (println t10)
         ;(send x00 feel-input "ANNE")
         ;(await x00 t10) (println t10)
         ;(send x00 feel-input "RG")
         ;(await x00 t10) (println t10)
         ;(send x00 feel-input "ANNE")
         ;(await x00 t10) (println t10)
         ;(send x00 feel-input "RG")
         ;(await x00 t10) (println t10)
         ;(send x00 feel-input "ANNE")
         ;(await x00 t10) (println t10)
         ;(pr-log t10)
         ;)

;(deftest sensor-replay-2-periods
         ;(def x00 (sensor))
         ;(def t10 (teuron))
         ;(def t20 (teuron))
         ;(add-sensor x00 t10)
         ;(add-listener t10 t20)
         ;(send x00 feel-input "1")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "2")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "3")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "4")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "1")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "2")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "3")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;(send x00 feel-input "4")
         ;(await x00 t10 t20)
         ;(println (get (deref t10) :patterns))
         ;;(println "\nt10 Log:" (@t10 :log))
         ;)

;(deftest spatial-testing
         ;(let [ x0 (sensor)
                ;x1 (sensor)
                ;x2 (sensor)
                ;x3 (sensor)
                ;s0 (seuron)
                ;s1 (seuron)
                ;s2 (seuron)
                ;t3 (teuron)
                ;t4 (teuron)
               ;]
         ;(add-sensors x0 x1 s0)
         ;(add-sensors x2 x3 s1)
         ;(add-sources s2 s0 s1)
           ;(add-listener s2 t3)
           ;(add-listener t3 t4)
         ;(send x0 feel-input 1)
         ;(send x1 feel-input 1)
         ;(send x2 feel-input 1)
         ;(send x3 feel-input 1)
         ;(await x0 x1 x2 x3 s0 s1 s2)
         ;(println "\n" (get (deref s0) :patterns) )
         ;(println (@x0 :log))
         ;(send x0 feel-input 2)
         ;(send x1 feel-input 2)
         ;(send x2 feel-input 2)
         ;(send x3 feel-input 2)
         ;(await x0 x1 x2 x3 s0 s1 s2)
         ;(println "\n" (get (deref s0) :patterns) )
         ;(println (@x0 :log))
         ;(send x0 feel-input 1)
         ;(send x1 feel-input 1)
         ;(await x0 x1 x2 x3 s0 s1 s2)
         ;(println "\n" (get (deref s0) :patterns) )
         ;(pr-log x0 x1 x2 x3 s0 s1 s2 t3 t4)
         ;))

;(deftest spatial-disambiguation
  ;(testing "Spatial Disambiguation Demo"
    ;(def x00 (sensor))
    ;(def t10 (teuron))
    ;(def s20 (seuron))
    ;(def t11 (teuron))
    ;(def x01 (sensor))
    ;(add-sensor x00 t10)
    ;(add-sources s20 t10 t11)
    ;(add-sensor x01 t11)
    ;(send x00 feel-input "rapha")
    ;(send x01 feel-input "enfant")
    ;(send x00 feel-input "anne")
    ;(send x01 feel-input "enfant")
    ;(send x00 feel-input "helene")
    ;(send x01 feel-input "enfant")
    ;(send x00 feel-input "papa")
    ;(send x01 feel-input "parent")
    ;(send x00 feel-input "maman")
    ;(send x01 feel-input "parent")
           ;))
;(run-tests)
